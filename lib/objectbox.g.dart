// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/note.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 6189682821285368195),
      name: 'Note',
      lastPropertyId: const IdUid(7, 1751409116383950591),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5155427280495691627),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4150653279644069473),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2685289047391409399),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4731472397361702730),
            name: 'insertTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6195155915547776845),
            name: 'remindTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1751409116383950591),
            name: 'isDone',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6189682821285368195),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5801067181347520814],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        9206305901023303681,
        3959149520606120259,
        899950244103998512,
        6524183204563261086,
        893244186296205039,
        2825406633124952012,
        2895549222776371929
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Note: EntityDefinition<Note>(
        model: _entities[0],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addInt64(4, object.insertTime?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.remindTime?.millisecondsSinceEpoch);
          fbb.addBool(6, object.isDone);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final insertTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final remindTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Note(
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              insertTime: insertTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(insertTimeValue),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              isDone: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              remindTime: remindTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(remindTimeValue))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[0].properties[0]);

  /// see [Note.text]
  static final text = QueryStringProperty<Note>(_entities[0].properties[1]);

  /// see [Note.title]
  static final title = QueryStringProperty<Note>(_entities[0].properties[2]);

  /// see [Note.insertTime]
  static final insertTime =
      QueryIntegerProperty<Note>(_entities[0].properties[3]);

  /// see [Note.remindTime]
  static final remindTime =
      QueryIntegerProperty<Note>(_entities[0].properties[4]);

  /// see [Note.isDone]
  static final isDone = QueryBooleanProperty<Note>(_entities[0].properties[5]);
}
